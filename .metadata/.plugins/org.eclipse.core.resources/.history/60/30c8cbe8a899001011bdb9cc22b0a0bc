<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!-- 
	URI(Uniform Resource Identifier)
	식별자 - 고유한 이름(PK) -> 실제 위치가 아니라 논리적인 식별값
	
	URL(Uniform Resource Locator)
	위치정보 -> 실제 파일의 경로나 웹 주소
 -->
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>자신과의 싸움</title>
</head>
<body>
	<h1>JSTL이란..?</h1>
	
	<p>
		Jakarta Server Page Standard Tag Library <br>
		JSP에서 사용할 수 있는 커스텀 액션 태그 <br>
		공통적으로 사용해야하는 코드들의 집합을 보다 쉽게 사용할 수 있도록 태그로 만들어서 <br>
		표준으로 제공하는 라이브러리(클래스 모음집)
	</p>
	
	<hr>
	
	<h3>* 라이브러리를 추가</h3>
	
	1) https://tomcat.apache.org로 접속 <br>
	2) Standard-1.2.5.jar파일 4개 다 다운받기 <br>
	3) WEB-INF/lib폴더에 추가해주기 <br>
	
	<h4>* JSTL 선언</h4>
	
	<p>
		JSTL을 사용하고자하는 해당 JSP파일 상단에 <br>
		(보통 page지시어 바로 밑어) <br>
		taglib지시어를 사용해서 선언함 <br><br>
		
		[ 표현법 ]<br>
		&lt;@ taglib prefix="접두어" uri="파일uri">
	</p>
	
	<hr>
	
	<h4>JSTL Core Libaray(오늘의 주인공)</h4>
	
	<p>
		변수와 조건문, 반복문 등의 로직과 관련된 태그들을 제공
	</p>
	
	<h5>변수(사실 변수아님 속성선언하기 == Attribute)</h5>
	
	<pre>
		솔직하게 이야기. 아까 배운 Scope들에게 새로운 속성 추가하는 방법
		[ 표현법 ]
		&lt;c:set var="키값" value="리터럴값" scope="스코프영역지정(생략가능)" />
		- Scope에 새로운 Attribute를 추가할 수 있는 태그
		- 더 나아가서 어떤 Scope에 추가할건지도 지정 가능(생략 시 pageScope에 담김)
		
	</pre>
	<%
		request.setAttribute("num1", 10);
	%>
	
	<c:set var="num1" value="10" />
	<c:set var="num2" value="20" scope="request"/>
	<c:set var="result" value="${ num1 + num2 }" scope="session" />
	
	num1의 값 : ${ num1 } <br>
	num2의 값 : ${ num2 } <br>
	result의 값 : ${ result } <br>
	
	<c:set var="result" scope="request">9999</c:set>
	<!--  value속성 말고 시작태그와 종료태그 사이에도 대입할 값을 기술할 수 있음 -->
	
	<hr>
	
	<pre>
		* 속성삭제(&lt;c:remove var="제거하려고하는 키값" scope="스코프영역(생략가능)"/>)
		
		- 해당 Attribute를 Scope영역에서 제거하는 태그
		- Scope속성을 작성하지 않으면 모든 scope에서 해당 Attribute를 찾아서 다 제거함
	</pre>
	
	삭제 전 result : ${ result } <br>
	
	<hr>
	
	requestScope에서 result속성을 삭제 <br>
	<c:remove var="result" scope="request"/>
	
	삭제 후 result : ${ result } <br>
	
	<hr>
	
	<pre>
		* 속성 출력(&lt;c:out value="출력할값" default="기본값" escapseXml="t/f"/>)
		- 데이터를출력하려고 할 때 사용하는 태그
		- default : 기본값, value속성에 출력하고자 하는 값이 없을 경우 대체해서 출력할
					내용물을 쓸 수 있음(생략가능)
		- escapeXml : HTML태그를 인식시킬수도있음
	</pre>
	
	num1을 출력! : <c:out value="${ num1 }" /> <br>
	이걸 왜 이렇게 씀 ? : ${ num1 } <br>
	
	<br>
	
	requestScope result : ${ requestScope.result } <br>
	out태그를 써볼까? : <c:out value="${ requestScope.result }" default="값이 없어요" />
	
	<br>
	
	<c:set var="outStr" value="<strong>강한정보</strong>"/>
	<br>
	${ outStr } <br>
	<c:out value="${ outStr }" /> <br>
	&lt;strong>강한정보&lt;/strong>
	
	<hr>
	
	<h3>2. 조건문 - if</h3>
	
	<pre>
	
		[표현법]
		&lt;c:if test="조건식">
			조건식이 true일 경우 실행할 내용
		$lt;/c:if>
		
		- Java의 단일 if문과 비슷한 역할을 수행하는 태그
		- 조건식은 test라는 속성에 작성
		  (조건식을 만들때는 반드시 EL구문으로 작성해야함!!!)
	</pre>
	<%--
	<% if((int)request.getAttribute("v1") > (int)request.getAttribute("v2")) {%>
		value1이 value2보다 큽니다
	<% } %>
	--%>
	
	<c:if test="${ num1 gt num2 }">
		<strong>num1이 num2보다 큽니다.</strong> <br> 
	</c:if>
	
	
	
	
	
	
	<br><br><br><br><br><br><br><br><br><br><br><br><br>
</body>
</html>