package com.kh.first.controller;

import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class RequestGetServlet
 */
// 매핑값은 서블릿마다 고유한 값이어야함
@WebServlet("/get.do")
public class RequestGetServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public RequestGetServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		
		/*
		 * 톰캣 실행 -> web.xml 파싱
		 * 
		 * init() => service() => doGet()/doPost() => destory()
		 * 서블릿 생명주기 / 싱글톤 패턴으로 객체 하나만을 사용 / 톰캣이 멀티 스레드 처리(스레드풀) 
		 */
		// System.out.println("헉 진짜임?");
		
		/*
		 * Dynamic WebProject진행 시 Servlet을 Controller로 사용
		 * 
		 * 1. 데이터 가공
		 * 2. 요청처리(Service호출)
		 * 3. 결과값 반환(응답화면지정)
		 * 
		 * View에서 Get방식으로 요청 시 doGet()가 호출됨
		 * 
		 */
		// System.out.println("GET방식으로 호출됨");
		/*
		 * 인자값으로 두 개 넘어옴
		 * 
		 * 첫 번째 매개변수 HttpServletRequest 타입에는 요청 시 전달된 내용들이 담김
		 * => 요청 전송 방식, 요총 URL, 요청한 사용자의 정보, 사용자가 input요소에 입력한 값 등.
		 * 
		 * 두 번째 매개변수 HttpServletResponse 타입은 요청 처리 후 응답할 때 사용하는 객체
		 * 
		 * 1. 우선 요청을 처리하기 위해서 요청 시 전달된 값(사용자가 입력한값)들을 뽑는다.
		 * => key-value세트로 담겨있음(name속성값=value속성값)
		 * => request의 Parameter라는 곳에서 전달값을 뽑아내야함
		 * 
		 * 2. 뽑아낸 값을 가공해서 요청 처리를 진행해야함(Service -> DAO -> DB)
		 * 
		 * 3. 처리결과에 따른 성공 / 실패 페이지 응답
		 */
		
		/*
		 * request의 parameter영역으로부터 전달된 데이터 값을 뽑아내는 방법
		 * 
		 * - request.getParameter("키값") : String(input요소에 적어놓은 name속성값)
		 * => 반환형이 String이기 때문에 다른 자료형으로 사용해야 한다면 Parsing해야 함
		 * 
		 * - request.getParameterValues("키값") : String[]
		 * => 하나의 key값으로 여러 개의 value들을 받아야 할 경우
		 */
		
		// 1단계. 값 뽑기
		String name = request.getParameter("name");
		System.out.println(name);
		// "셀 수 없음"
		// "홍길동" / ""(텍스트상자가 비어있을 경우 빈 문자열) / null
		
		String gender = request.getParameter("gender");
		System.out.println(gender);
		// "남" / "여" / "선택 안 함" / null
		
		int age = Integer.parseInt(request.getParameter("age"));
		// Wrapper클래스를 이용해서 파싱
		System.out.println(age);
		// "14" / ""
		// "" : NumberFormatException이 발생
		
		String city = request.getParameter("city");
		System.out.println("city");
		// "서울" / "제주도"
		
		double height = Double.parseDouble(request.getParameter("height"));
		System.out.println(height);
		int realHeight = (int)height;
		
		String[] foods = request.getParameterValues("food");
		System.out.println(foods);
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
