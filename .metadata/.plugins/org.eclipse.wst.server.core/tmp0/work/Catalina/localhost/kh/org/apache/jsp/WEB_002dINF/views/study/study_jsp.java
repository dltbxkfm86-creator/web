/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.96
 * Generated at: 2025-10-15 06:29:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.study;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class study_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1758768266923L));
    _jspx_dependants.put("jar:file:/C:/java/web-workspace/khProject2/src/main/webapp/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>AJAX</title>\r\n");
      out.write("  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css\">\r\n");
      out.write("  <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\"></script>\r\n");
      out.write("  <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>AJAX</h1>\r\n");
      out.write("	<h2>아주 중요!!! 별이 다섯개!!!★★★★★</h2>\r\n");
      out.write("	<pre>\r\n");
      out.write("		AJAX = Asynchronous JavaScript And XML\r\n");
      out.write("		\"페이지를 새로고침하지않고 서버와 데이터를 주고받을 수 있는 기술\"\r\n");
      out.write("		\"비동기 통신\"\r\n");
      out.write("		\r\n");
      out.write("		우리가 그동안 개발했던 방식은 동기방식\r\n");
      out.write("		동기방식 :\r\n");
      out.write("		1. 사용자가 버튼 클릭\r\n");
      out.write("		2. 서버가 요청을 받고 전체 HTML데이터를 응답\r\n");
      out.write("		3. 브라우저가 전체 페이지 다시 로딩 -> 화면 전체 깜빡임\r\n");
      out.write("		\r\n");
      out.write("		비동기 방식 :\r\n");
      out.write("		1. 사용자가 버튼 클릭\r\n");
      out.write("		2. JavaScript를 이용해서 데이터만 서버로 띡 전송\r\n");
      out.write("		3. 서버는 JSON/XML데이터만 응답\r\n");
      out.write("		4. JavaScript를 이용해서 필요한 부분만 갱신 -> 부드럽고, 빠름\r\n");
      out.write("		\r\n");
      out.write("		<hr>\r\n");
      out.write("		\r\n");
      out.write("		<h3>AJAX 장단점</h3>\r\n");
      out.write("		\r\n");
      out.write("		장점 : 사용자 경험(U.X)향상\r\n");
      out.write("			  서버 부하 감소\r\n");
      out.write("			  네트워크 트래픽 절약\r\n");
      out.write("			  실시간성 구현 가능\r\n");
      out.write("	 	\r\n");
      out.write("	 	단점 : SEO에 취약함\r\n");
      out.write("	 	   	  브라우저 히스토리 관리 복잡\r\n");
      out.write("	 	   	  JavaScript 의존성\r\n");
      out.write("	 	   	  보안 취약점 증가 (XSS)\r\n");
      out.write("	 	  \r\n");
      out.write("	 	SPA(Single Page Application) 전성시대\r\n");
      out.write("	 	React, Vue, Angular => AJAX기반 라이브러리 및 프레임워크\r\n");
      out.write("	 	\r\n");
      out.write("	</pre>\r\n");
      out.write("	\r\n");
      out.write("	<h2>JSON</h2>\r\n");
      out.write("	\r\n");
      out.write("	<pre>\r\n");
      out.write("		홍길동(hong)\r\n");
      out.write("		\r\n");
      out.write("		인천의전사독 재미따\r\n");
      out.write("		\r\n");
      out.write("		댓글 0		따봉개수 2 야유개수 1\r\n");
      out.write("		\r\n");
      out.write("		<reply>\r\n");
      out.write("		<nickName>홍길동</nickName>\r\n");
      out.write("		<id>hong</id>\r\n");
      out.write("		<reply></reply>\r\n");
      out.write("		<tabom>2</tabom>\r\n");
      out.write("		<uuuu>1</uuuu>\r\n");
      out.write("		</reply>\r\n");
      out.write("		(구세대 방식)\r\n");
      out.write("		\r\n");
      out.write("		reply : {\r\n");
      out.write("			\"nickName\" : \"홍길동\",\r\n");
      out.write("			\"id\" : \"hong\",\r\n");
      out.write("			\"content\" : \"아하하 인천의 전사독 너무 재밌고\",\r\n");
      out.write("			reply : [],\r\n");
      out.write("			tabom : 2,\r\n");
      out.write("			uuuu : 1\r\n");
      out.write("		}\r\n");
      out.write("		(표준방식)\r\n");
      out.write("		JSON == JavaScript Object Notation\r\n");
      out.write("		\r\n");
      out.write("		\"사람이 읽기 쉽고, 기계가 파싱하기 쉬운 데이터 교환 형식\"\r\n");
      out.write("		텍스트 기반이라 아주 가볍다\r\n");
      out.write("		\r\n");
      out.write("		진짜로 자바스크립트는 아니다★★★★★ 자바스크립트 객체모양으로 문자열을 만든거\r\n");
      out.write("		문법이 아주 엄격함!! 자바스크립트 객체\r\n");
      out.write("		{\r\n");
      out.write("			name : \"홍길동\", 		// 키에 따옴표 없음 가능\r\n");
      out.write("			age : 15, 			// 작은 따옴표 사용가능\r\n");
      out.write("			address : '서울',		// 마지막 속성값에 컴마 가능\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		Json 형식\r\n");
      out.write("		{\r\n");
      out.write("			\"name\" : \"홍길동\",\r\n");
      out.write("			\"address\" : \"서울\",\r\n");
      out.write("			\"age\" : 15\r\n");
      out.write("		}\r\n");
      out.write("		장점 :\r\n");
      out.write("		다곧성이 뛰어남(XML과 비교해서 훨씬 읽기 쉬움)\r\n");
      out.write("		데이터 자체가 가볍다.(XML대비해서 30%더 가벼움)\r\n");
      out.write("		파싱 속도 빠름\r\n");
      out.write("		언어 독립적\r\n");
      out.write("		JavaScript 네이티브 지원\r\n");
      out.write("		\r\n");
      out.write("		단점 :\r\n");
      out.write("		주석 불가\r\n");
      out.write("		날짜 타입 없음(문자열로 처리)\r\n");
      out.write("		함수 불가능\r\n");
      out.write("		\r\n");
      out.write("		웹개발의 표준!!! 데이터 형식\r\n");
      out.write("		Rest API의 기본 포맷!!!\r\n");
      out.write("		설정파일XML -> JSON(설정 파일은 YAML이 더 인기있음)\r\n");
      out.write("	</pre>\r\n");
      out.write("	\r\n");
      out.write("	<pre>\r\n");
      out.write("		우리는 AJAX를 이용해서 아이디 중복체크기능을 구현해볼 예정\r\n");
      out.write("		근데 시간이 애매해서 그냥 다음주에 댓글까지 하겠음 아이디 중복체크 + 댓글기능\r\n");
      out.write("		AJAX사용방법\r\n");
      out.write("		1. XMLHTTPRequest 객체 사용하기				-\r\n");
      out.write("		2. jQuery 사용해서 Aajax메소드 호출하기			+\r\n");
      out.write("		3. fetch API 활용해서 fetch호출하기			+\r\n");
      out.write("		4. Reacr 배울 때 Axios라이브러리 설치해서 사용하기	+\r\n");
      out.write("	</pre>\r\n");
      out.write("	\r\n");
      out.write("	<pre>\r\n");
      out.write("		* JQuery를 사용한 AJAX 통신\r\n");
      out.write("		[ 표현법 ]\r\n");
      out.write("		\r\n");
      out.write("		// 자바 스크립트에서 값 여러개 다룰 때 사용하는거\r\n");
      out.write("		// 1. 배열 | 2. 객체\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			속성명 : 값,\r\n");
      out.write("			속성명 : 값,\r\n");
      out.write("			속성명 : 값,	\r\n");
      out.write("			...\r\n");
      out.write("		});  =========> 4일 동안 숙제 : Web으로 CRUD구현 + 인터페이스 / 다형성 / J.S복습\r\n");
      out.write("		\r\n");
      out.write("		* 주요 속성\r\n");
      out.write("		 - url : 요청할 URL(필수로 작성) => form태그의 action 속성\r\n");
      out.write("		 - type : 요청 전송방식(GET/POST... FETCH, PUT, DELETE, OPTION...)\r\n");
      out.write("		          => form 태그의 method속성\r\n");
      out.write("		 - data : 요청 시 전달 값({키 : 밸류, 키 : 밸류}) => form 태그의 inputd요소 value값\r\n");
      out.write("		 - sucess : 통신 성공 시 실행할 콜박 함수를 정의\r\n");
      out.write("		 -------------------------------------------------------------------------------------\r\n");
      out.write("		 - error : 통신 실패 시 실행할 콜백함수를 정의\r\n");
      out.write("		 - complete : 성공하든 실해하든 무조건 끝나면 실행할 콜백함수를 정의\r\n");
      out.write("	</pre>\r\n");
      out.write("	\r\n");
      out.write("	<h2>jQuery를 사용한 AJAX요청 및 응답</h2>\r\n");
      out.write("	<h3>1. 버튼을 클릭하여 서버에 데이터를 전송하고 단순 문자열 데이터 응답받기</h3>\r\n");
      out.write("	\r\n");
      out.write("	<div class=\"form-group\">\r\n");
      out.write("	<div class=\"form-control\">\r\n");
      out.write("		입력 : <input type=\"text\" id=\"input1\" />\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"form-control\">\r\n");
      out.write("		<button class=\"btn btn-sm btn-primary\" id =\"btn1\">요청보내기</button>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	응답 : <label id=\"output1\">현재 응답없음</label>\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("	\r\n");
      out.write("		// 요청 보내기 버튼을 클릭하면!\r\n");
      out.write("		$('#btn1').click(function(){\r\n");
      out.write("			\r\n");
      out.write("			// 동기식 요청\r\n");
      out.write("			// location.href = \"ajax.do?input1=머시기\";\r\n");
      out.write("			\r\n");
      out.write("			// 비동시식 요청(jQuery버전)\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url : \"ajax1.do\",\r\n");
      out.write("				type : \"get\",\r\n");
      out.write("				data : {\r\n");
      out.write("					value : $(\"#input1\").val()\r\n");
      out.write("				},\r\n");
      out.write("				success : function(result){\r\n");
      out.write("					console.log(\"AJAX요청 성공!\");\r\n");
      out.write("					console.log(result);\r\n");
      out.write("					$(\"#output1\").text(result);\r\n");
      out.write("				},\r\n");
      out.write("				error : function(){\r\n");
      out.write("					console.log(\"AJAX요청 실패!\")\r\n");
      out.write("				},\r\n");
      out.write("				complete : function(){\r\n");
      out.write("					console.log(\"나는 무조건 함!\")\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("		})\r\n");
      out.write("	\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<hr>\r\n");
      out.write("	\r\n");
      out.write("	<h3>2. 버튼 클릭 시 DB조회 결과 응답</h3>\r\n");
      out.write("	\r\n");
      out.write("	아이디 : <input type=\"text\" id=\"userId\"/> <br>\r\n");
      out.write("	비밀번호 : <input type=\"password\" id=\"userPwd\" /> <br>\r\n");
      out.write("	<button onclick=\"memberInfo();\">정보조회</button>\r\n");
      out.write("	\r\n");
      out.write("	<br><br>\r\n");
      out.write("	사용자 이름 : <label id=\"name\">현재 응답 없음</label>\r\n");
      out.write("	사용자 이메일 : <label id=\"email\">현재 응답 없음</label>\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("		function memberInfo(){\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url : \"ajax2.do\",\r\n");
      out.write("				type : \"post\",\r\n");
      out.write("				data : {\r\n");
      out.write("					id : $(\"#userId\").val(),\r\n");
      out.write("					pwd : $(\"#userPwd\").val()\r\n");
      out.write("				},\r\n");
      out.write("				success : function(response){\r\n");
      out.write("					console.log(\"AJAX요청 성공!\");\r\n");
      out.write("					console.log(response);\r\n");
      out.write("					// $('#name').text(response[0]);\r\n");
      out.write("					// $('#email').text(response[1]);\r\n");
      out.write("					\r\n");
      out.write("					$('#name').text(response.name);\r\n");
      out.write("					$('#email').text(response.email);\r\n");
      out.write("				},\r\n");
      out.write("				error : function(e){\r\n");
      out.write("					console.log(e);\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("			})\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<h3>3. 서버로 요청 후, 여러 개의 객체 응답받아 출력해보기</h3>\r\n");
      out.write("	\r\n");
      out.write("	<br>\r\n");
      out.write("	\r\n");
      out.write("	<table id=\"table-result\" class=\"table\">\r\n");
      out.write("		<thead>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>글번호</th>\r\n");
      out.write("				<th>제목</th>\r\n");
      out.write("				<th>작성자</th>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</thead>\r\n");
      out.write("		<tbody>\r\n");
      out.write("			\r\n");
      out.write("		</tbody>\r\n");
      out.write("	</table>\r\n");
      out.write("	\r\n");
      out.write("	<button class=\"btn btn-sm btn-danger\" onclick=\"find();\">게시글 조회</button>\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("		function find(){\r\n");
      out.write("			\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url : \"ajax3.do\",\r\n");
      out.write("				type : \"get\",\r\n");
      out.write("				success : function(result){\r\n");
      out.write("					// console.log(result);\r\n");
      out.write("					\r\n");
      out.write("					let str ='';\r\n");
      out.write("					\r\n");
      out.write("					for(e of result){\r\n");
      out.write("						// console.log(e.board);\r\n");
      out.write("						const board = e.board;\r\n");
      out.write("						str += `\r\n");
      out.write("								<tr>\r\n");
      out.write("									<td>${board.boardNo}</td>\r\n");
      out.write("									<td>${board.bpardTitle}</td>\r\n");
      out.write("									<td>${board.boardWriter}</td>\r\n");
      out.write("								</tr>\r\n");
      out.write("							   `;\r\n");
      out.write("					}\r\n");
      out.write("					$('tbody').html(str);\r\n");
      out.write("				}\r\n");
      out.write("			});		\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
